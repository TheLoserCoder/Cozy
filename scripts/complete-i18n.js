#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —è–∑—ã–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
 */

const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const LOCALES_DIR = path.join(__dirname, '../src/locales');
const RU_FILE = path.join(LOCALES_DIR, 'ru.ts');

// –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const LANGUAGES = [
  { code: 'en', name: 'English' },
  { code: 'de', name: 'German' },
  { code: 'fr', name: 'French' },
  { code: 'es', name: 'Spanish' },
  { code: 'it', name: 'Italian' },
  { code: 'pt', name: 'Portuguese' },
  { code: 'nl', name: 'Dutch' },
  { code: 'pl', name: 'Polish' },
  { code: 'cs', name: 'Czech' },
  { code: 'ja', name: 'Japanese' },
  { code: 'ko', name: 'Korean' }
];

// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π
const TRANSLATIONS = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤
  clockSettings: {
    en: 'Clock Settings',
    de: 'Uhren-Einstellungen',
    fr: 'Param√®tres de l\'horloge',
    es: 'Configuraci√≥n del reloj',
    it: 'Impostazioni orologio',
    pt: 'Configura√ß√µes do rel√≥gio',
    nl: 'Klok instellingen',
    pl: 'Ustawienia zegara',
    cs: 'Nastaven√≠ hodin',
    ja: 'ÊôÇË®àË®≠ÂÆö',
    ko: 'ÏãúÍ≥Ñ ÏÑ§Ï†ï'
  },
  searchSettings: {
    en: 'Search',
    de: 'Suche',
    fr: 'Recherche',
    es: 'B√∫squeda',
    it: 'Ricerca',
    pt: 'Pesquisa',
    nl: 'Zoeken',
    pl: 'Wyszukiwanie',
    cs: 'Vyhled√°v√°n√≠',
    ja: 'Ê§úÁ¥¢',
    ko: 'Í≤ÄÏÉâ'
  },
  // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã...
};

/**
 * –ß–∏—Ç–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏
 */
function extractKeysFromRussian() {
  console.log('üìñ –ß–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å...');
  
  const ruContent = fs.readFileSync(RU_FILE, 'utf8');
  
  // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ TypeScript —Ñ–∞–π–ª–∞
  const keys = [];
  const lines = ruContent.split('\n');
  
  for (const line of lines) {
    const match = line.match(/^\s*(\w+):\s*['"`](.+?)['"`],?\s*$/);
    if (match) {
      const [, key, value] = match;
      keys.push({ key, value });
    }
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${keys.length} –∫–ª—é—á–µ–π –≤ —Ä—É—Å—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ`);
  return keys;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏
 */
function updateLanguageFile(langCode, keys) {
  const langFile = path.join(LOCALES_DIR, `${langCode}.ts`);
  
  if (!fs.existsSync(langFile)) {
    console.log(`‚ùå –§–∞–π–ª ${langFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ${langCode}.ts...`);
  
  let content = fs.readFileSync(langFile, 'utf8');
  
  // –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π (–ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π settings)
  const settingsEndMatch = content.match(/(\s+)}\s*,\s*\/\/\s*Lists/);
  if (!settingsEndMatch) {
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ ${langCode}.ts`);
    return;
  }
  
  const indent = settingsEndMatch[1];
  let newKeys = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
  for (const { key } of keys) {
    if (!content.includes(`${key}:`)) {
      const translation = TRANSLATIONS[key] && TRANSLATIONS[key][langCode] 
        ? TRANSLATIONS[key][langCode] 
        : `[${key}]`; // –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç
      
      newKeys.push(`${indent}${key}: '${translation}',`);
    }
  }
  
  if (newKeys.length > 0) {
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
    const insertPosition = content.indexOf(settingsEndMatch[0]);
    const newContent = content.slice(0, insertPosition) + 
                      newKeys.join('\n') + '\n' + 
                      content.slice(insertPosition);
    
    fs.writeFileSync(langFile, newContent, 'utf8');
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newKeys.length} –∫–ª—é—á–µ–π –≤ ${langCode}.ts`);
  } else {
    console.log(`‚úÖ ${langCode}.ts —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π...\n');
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    const keys = extractKeysFromRussian();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫–æ–≤–æ–π —Ñ–∞–π–ª
    for (const { code, name } of LANGUAGES) {
      console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${name} (${code})...`);
      updateLanguageFile(code, keys);
    }
    
    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
    console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –Ω–∞ t() —Ñ—É–Ω–∫—Ü–∏–∏');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, extractKeysFromRussian, updateLanguageFile };
